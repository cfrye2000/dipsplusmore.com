<?php
// Generated automatically by daogen.
// Do NOT edit this file.
// Any changes made to this file will be overwritten the next time it is generated.

if (!class_exists('Products')) include dirname(__FILE__).'/Products.class.php';

class ProductsDAO {
	public static $ALLOWED_QUERY_OPERATORS = array('=', '<', '<=', '>', '>=', 'beginsWith', 'contains', 'endsWith');
	public static $ALLOWED_NUMERIC_QUERY_OPERATORS = array('=', '<', '<=', '>', '>=');
	public static $ALLOWED_STRING_QUERY_OPERATORS = array('=', '<', '<=', '>', '>=', 'beginsWith', 'contains', 'endsWith');
	protected $connection;

	public function ProductsDAO($connection) {
		$this->connection = $connection;
	}

	public function insert($products) {
		$ps = new PreparedStatement("insert into products (productid, name, description, ingredients, price, weight, category, isvisible, sequence) values (?, ?, ?, ?, ?, ?, ?, ?, ?)");
		$ps->setString($products->productid);
		$ps->setString($products->name);
		$ps->setString($products->description);
		$ps->setString($products->ingredients);
		$ps->setDouble($products->price);
		$ps->setString($products->weight);
		$ps->setInt($products->category);
		$ps->setInt($products->isvisible);
		$ps->setInt($products->sequence);
		$this->connection->executeUpdate($ps);
		$products->id = $this->connection->getLastInsertId();
	}

	public function update($products) {
		$ps = new PreparedStatement("update products set productid = ?, name = ?, description = ?, ingredients = ?, price = ?, weight = ?, category = ?, isvisible = ?, sequence = ? where id = ?");
		$ps->setString($products->productid);
		$ps->setString($products->name);
		$ps->setString($products->description);
		$ps->setString($products->ingredients);
		$ps->setDouble($products->price);
		$ps->setString($products->weight);
		$ps->setInt($products->category);
		$ps->setInt($products->isvisible);
		$ps->setInt($products->sequence);
		$ps->setInt($products->id);
		$this->connection->executeUpdate($ps);
	}

	public function delete($id) {
		$ps = new PreparedStatement("delete from products where id = ?");
		$ps->setInt($id);
		$this->connection->executeUpdate($ps);
	}

	public function load($id) {
		$ps = new PreparedStatement("select * from products where id = ?");
		$ps->setInt($id);
		$arr = $this->connection->fetchArray($this->connection->executeQuery($ps), true);
		if ($arr === false) return false;
		$products = new Products();
		$products->loadFromArray($arr);
		return $products;
	}

	public function findByIdPS($id, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		if (!in_array($queryOperator, ProductsDAO::$ALLOWED_NUMERIC_QUERY_OPERATORS)) $queryOperator = ProductsDAO::$ALLOWED_NUMERIC_QUERY_OPERATORS[0];
		$ps = new PreparedStatement("select * from products where id $queryOperator ?".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		$ps->setInt($id);
		return $ps;
	}

	public function findById($id, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findByIdPS($id, $queryOperator, $orderBy, $offset, $limit));
	}

	public function findByProductidPS($productid, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		if (!in_array($queryOperator, ProductsDAO::$ALLOWED_STRING_QUERY_OPERATORS)) $queryOperator = ProductsDAO::$ALLOWED_STRING_QUERY_OPERATORS[0];
		$sqlQueryOperator = (($queryOperator == 'beginsWith') || ($queryOperator == 'endsWith') || ($queryOperator == 'contains')) ? 'like' : $queryOperator;
		$ps = new PreparedStatement("select * from products where productid $sqlQueryOperator ?".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		if ($queryOperator == 'beginsWith') {
			$ps->setString($productid.'%');
		} else if ($queryOperator == 'endsWith') {
			$ps->setString('%'.$productid);
		} else if ($queryOperator == 'contains') {
			$ps->setString('%'.$productid.'%');
		} else {
			$ps->setString($productid);
		}
		return $ps;
	}

	public function findByProductid($productid, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findByProductidPS($productid, $queryOperator, $orderBy, $offset, $limit));
	}

	public function findByNamePS($name, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		if (!in_array($queryOperator, ProductsDAO::$ALLOWED_STRING_QUERY_OPERATORS)) $queryOperator = ProductsDAO::$ALLOWED_STRING_QUERY_OPERATORS[0];
		$sqlQueryOperator = (($queryOperator == 'beginsWith') || ($queryOperator == 'endsWith') || ($queryOperator == 'contains')) ? 'like' : $queryOperator;
		$ps = new PreparedStatement("select * from products where name $sqlQueryOperator ?".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		if ($queryOperator == 'beginsWith') {
			$ps->setString($name.'%');
		} else if ($queryOperator == 'endsWith') {
			$ps->setString('%'.$name);
		} else if ($queryOperator == 'contains') {
			$ps->setString('%'.$name.'%');
		} else {
			$ps->setString($name);
		}
		return $ps;
	}

	public function findByName($name, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findByNamePS($name, $queryOperator, $orderBy, $offset, $limit));
	}

	public function findByDescriptionPS($description, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		if (!in_array($queryOperator, ProductsDAO::$ALLOWED_STRING_QUERY_OPERATORS)) $queryOperator = ProductsDAO::$ALLOWED_STRING_QUERY_OPERATORS[0];
		$sqlQueryOperator = (($queryOperator == 'beginsWith') || ($queryOperator == 'endsWith') || ($queryOperator == 'contains')) ? 'like' : $queryOperator;
		$ps = new PreparedStatement("select * from products where description $sqlQueryOperator ?".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		if ($queryOperator == 'beginsWith') {
			$ps->setString($description.'%');
		} else if ($queryOperator == 'endsWith') {
			$ps->setString('%'.$description);
		} else if ($queryOperator == 'contains') {
			$ps->setString('%'.$description.'%');
		} else {
			$ps->setString($description);
		}
		return $ps;
	}

	public function findByDescription($description, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findByDescriptionPS($description, $queryOperator, $orderBy, $offset, $limit));
	}

	public function findByIngredientsPS($ingredients, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		if (!in_array($queryOperator, ProductsDAO::$ALLOWED_STRING_QUERY_OPERATORS)) $queryOperator = ProductsDAO::$ALLOWED_STRING_QUERY_OPERATORS[0];
		$sqlQueryOperator = (($queryOperator == 'beginsWith') || ($queryOperator == 'endsWith') || ($queryOperator == 'contains')) ? 'like' : $queryOperator;
		$ps = new PreparedStatement("select * from products where ingredients $sqlQueryOperator ?".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		if ($queryOperator == 'beginsWith') {
			$ps->setString($ingredients.'%');
		} else if ($queryOperator == 'endsWith') {
			$ps->setString('%'.$ingredients);
		} else if ($queryOperator == 'contains') {
			$ps->setString('%'.$ingredients.'%');
		} else {
			$ps->setString($ingredients);
		}
		return $ps;
	}

	public function findByIngredients($ingredients, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findByIngredientsPS($ingredients, $queryOperator, $orderBy, $offset, $limit));
	}

	public function findByPricePS($price, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		if (!in_array($queryOperator, ProductsDAO::$ALLOWED_NUMERIC_QUERY_OPERATORS)) $queryOperator = ProductsDAO::$ALLOWED_NUMERIC_QUERY_OPERATORS[0];
		$ps = new PreparedStatement("select * from products where price $queryOperator ?".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		$ps->setDouble($price);
		return $ps;
	}

	public function findByPrice($price, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findByPricePS($price, $queryOperator, $orderBy, $offset, $limit));
	}

	public function findByWeightPS($weight, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		if (!in_array($queryOperator, ProductsDAO::$ALLOWED_STRING_QUERY_OPERATORS)) $queryOperator = ProductsDAO::$ALLOWED_STRING_QUERY_OPERATORS[0];
		$sqlQueryOperator = (($queryOperator == 'beginsWith') || ($queryOperator == 'endsWith') || ($queryOperator == 'contains')) ? 'like' : $queryOperator;
		$ps = new PreparedStatement("select * from products where weight $sqlQueryOperator ?".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		if ($queryOperator == 'beginsWith') {
			$ps->setString($weight.'%');
		} else if ($queryOperator == 'endsWith') {
			$ps->setString('%'.$weight);
		} else if ($queryOperator == 'contains') {
			$ps->setString('%'.$weight.'%');
		} else {
			$ps->setString($weight);
		}
		return $ps;
	}

	public function findByWeight($weight, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findByWeightPS($weight, $queryOperator, $orderBy, $offset, $limit));
	}

	public function findByCategoryPS($category, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		if (!in_array($queryOperator, ProductsDAO::$ALLOWED_NUMERIC_QUERY_OPERATORS)) $queryOperator = ProductsDAO::$ALLOWED_NUMERIC_QUERY_OPERATORS[0];
		$ps = new PreparedStatement("select * from products where category $queryOperator ?".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		$ps->setInt($category);
		return $ps;
	}

	public function findByCategory($category, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findByCategoryPS($category, $queryOperator, $orderBy, $offset, $limit));
	}

	public function findByIsvisiblePS($isvisible, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		if (!in_array($queryOperator, ProductsDAO::$ALLOWED_NUMERIC_QUERY_OPERATORS)) $queryOperator = ProductsDAO::$ALLOWED_NUMERIC_QUERY_OPERATORS[0];
		$ps = new PreparedStatement("select * from products where isvisible $queryOperator ?".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		$ps->setInt($isvisible);
		return $ps;
	}

	public function findByIsvisible($isvisible, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findByIsvisiblePS($isvisible, $queryOperator, $orderBy, $offset, $limit));
	}

	public function findBySequencePS($sequence, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		if (!in_array($queryOperator, ProductsDAO::$ALLOWED_NUMERIC_QUERY_OPERATORS)) $queryOperator = ProductsDAO::$ALLOWED_NUMERIC_QUERY_OPERATORS[0];
		$ps = new PreparedStatement("select * from products where sequence $queryOperator ?".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		$ps->setInt($sequence);
		return $ps;
	}

	public function findBySequence($sequence, $queryOperator = '=', $orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findBySequencePS($sequence, $queryOperator, $orderBy, $offset, $limit));
	}

	public function findAllPS($orderBy = null, $offset = 0, $limit = 0) {
		$ps = new PreparedStatement("select * from products".((($orderBy!==null)&&($orderBy!='')) ? (' order by '.$orderBy) : ''), $offset, $limit);
		return $ps;
	}

	public function findAll($orderBy = null, $offset = 0, $limit = 0) {
		return $this->findWithPreparedStatement($this->findAllPS($orderBy, $offset, $limit));
	}

	public function findWithPreparedStatement($ps) {
		return ProductsDAO::loadAllFromResultSet($this->connection, $this->connection->executeQuery($ps), true);
	}

	public static function loadAllFromResultSet($connection, $rs, $freeResultBeforeReturn = false) {
		$rows = array();
		while ($arr = $connection->fetchArray($rs)) {
			$products = new Products();
			$products->loadFromArray($arr);
			$rows[] = $products;
		}
		if ($freeResultBeforeReturn) $connection->freeResult($rs);
		return $rows;
	}
}
